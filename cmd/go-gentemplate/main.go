package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
	"time"
)

type argParser func(args string) (result interface{}, err error)

func parseIniArgs(args string) (interface{}, error) {
	data := map[string]string{}

	if args == "" {
		return data, nil
	}

	for _, arg := range strings.Split(args, ",") {
		s := strings.Split(arg, "=")
		data[s[0]] = s[1]
	}

	return data, nil
}

func parseJSONArgs(args string) (interface{}, error) {
	var data interface{}

	err := json.Unmarshal([]byte(args), &data)

	return data, err
}

var encodingIni = "ini"
var encodingJSON = "json"

func openOutput(destination string) (io.WriteCloser, error) {
	if destination == "-" {
		return os.Stdout, nil
	}

	return os.Create(destination)
}

func writeToDestination(destination string, buffer io.WriterTo) error {
	if destination == "-" {
		_, err := buffer.WriteTo(os.Stdout)
		return err
	}

	fp, err := os.Create(destination)
	if err != nil {
		return err
	}
	defer fp.Close()

	_, err = buffer.WriteTo(fp)
	return err
}

func selectParser(encoding string) (argParser, error) {
	switch encoding {
	case encodingIni:
		return parseIniArgs, nil
	case encodingJSON:
		return parseJSONArgs, nil
	default:
		return nil, fmt.Errorf("no valid output choosen %v", encoding)
	}
}

func openTemplate(source string) (tmpl *template.Template, err error) {
	raw, err := ioutil.ReadFile(source)
	if err != nil {
		return nil, err
	}

	tmpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// ` + time.Now().String() + `
// using data from
// ` + source + `
` + string(raw)))

	return
}

func main() {
	encoding := flag.String("enc", "ini", "Format to parse")
	source := flag.String("src", "", "Source file")
	destination := flag.String("dest", "-", "Destination file")
	ignoreError := flag.Bool("ignore-error", false, "Ignore errors when keys are missing")

	flag.Parse()

	if *source == "" {
		fmt.Println("")
		flag.Usage()
		fmt.Println("")
		log.Fatal("a source template is needed")
	}

	parser, err := selectParser(*encoding)
	if err != nil {
		flag.Usage()
		log.Fatalf("invalid encoding %v", err)
	}

	data, err := parser(flag.Arg(0))
	if err != nil {
		log.Fatal(err)
	}

	tmpl, err := openTemplate(*source)
	if err != nil {

		log.Fatal(err)
	}

	if !*ignoreError {
		tmpl.Option("missingkey=error")
	}

	buffer := bytes.NewBuffer(nil)
	err = tmpl.Execute(buffer, data)
	if err != nil {
		log.Fatalf("invalid arguments %v", err)
	}

	err = writeToDestination(*destination, buffer)
	if err != nil {
		log.Fatalf("invalid arguments %v", err)
	}
}
